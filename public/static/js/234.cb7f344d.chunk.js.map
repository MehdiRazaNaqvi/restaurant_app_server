{"version":3,"file":"static/js/234.cb7f344d.chunk.js","mappings":"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","sources":["screen/package/packageForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    ListGroup, ListGroupItem,\r\n    CardTitle\r\n} from 'reactstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport Form from 'react-validation/build/form';\r\nimport { COLORS } from '../../colors';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { uploadMedia } from '../../redux/actions'\r\nimport { getPackageType, createPackage, editPackage } from '../../redux/actions/package';\r\nimport { imgURL } from '../../redux/config';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\nconst PackageForm = (props) => {\r\n\r\n    const [preview_src, set_preview_src] = useState(\"\")\r\n\r\n\r\n    const preview_image = (e) => {\r\n        // URL.revokeObjectURL(output.src)\r\n        const img_preview = URL.createObjectURL(e.target.files[0]);\r\n        set_preview_src(img_preview)\r\n\r\n        // URL.revokeObjectURL(preview_src)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    const { register, handleSubmit, errors } = useForm(); // initialise the hook\r\n    let initialState = { name: \"\", packageTypeId: \"\", image: \"\" }\r\n    const [Formvalue, setFormvalue] = useState(initialState);\r\n    const packageTypeListSelector = useSelector((state) => state.package.packageTypeList);\r\n    const [packageTypeList, setPackageTypeList] = useState([])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n\r\n        set_preview_src(\"\")\r\n\r\n        if (!packageTypeListSelector.length) {\r\n            dispatch(getPackageType())\r\n        } else {\r\n            if (packageTypeListSelector.length !== packageTypeList.length) {\r\n                setPackageTypeList(packageTypeListSelector)\r\n            }\r\n        }\r\n        if (props.editData) {\r\n            setFormvalue(props.editData)\r\n        }\r\n    }, [props.editData, packageTypeListSelector.length])\r\n\r\n\r\n    \r\n    const onSubmit = (data) => {\r\n\r\n\r\n\r\n        if (!props.editData) {\r\n\r\n            setFormvalue(data);\r\n\r\n            let formData = new FormData()\r\n            formData.append('file', data.image[0])\r\n            dispatch(uploadMedia(formData, (fileUrl) => {\r\n                let obj = Object.assign({}, data)\r\n                obj.image = fileUrl\r\n                dispatch(createPackage(obj, (data) => { props.updateList(data); toast.success(\"Package Created\"); set_preview_src(\"\") }))\r\n            }))\r\n        }\r\n        else {\r\n            if (Object.keys(data.image).length) {\r\n                let formData = new FormData()\r\n                formData.append('file', data.image[0])\r\n                dispatch(uploadMedia(formData, (fileUrl) => {\r\n                    let obj = Object.assign({}, data)\r\n                    obj.image = fileUrl\r\n                    delete obj.packageTypeId\r\n                    dispatch(editPackage(props.editData._id, obj, (data) => {\r\n                        props.updateList(data)\r\n                        setFormvalue(initialState)\r\n                        props.cancelEdit()\r\n                        toast.success(\"Package Updated\")\r\n                        set_preview_src(\"\")\r\n\r\n                    }))\r\n                }))\r\n            } else {\r\n                let obj = Object.assign({}, data)\r\n                delete obj.image\r\n                delete obj.packageTypeId\r\n                dispatch(editPackage(props.editData._id, obj, (data) => {\r\n                    props.updateList(data);\r\n                    setFormvalue(initialState);\r\n                    props.cancelEdit();\r\n                    toast.success(\"Package Updated\")\r\n                    set_preview_src(\"\")\r\n                }))\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n\r\n\r\n        <Row>\r\n            <Col sm={\"12\"}>\r\n                <Card>\r\n                    <CardTitle className=\"p-3 border-bottom mb-0\">\r\n                        <i className=\"mdi mdi-alert-box mr-2\" />\r\n                        {props.editData ? props.editData.name + \" | Edit Package\" : 'Create Package'}\r\n                    </CardTitle>\r\n                    <CardBody>\r\n\r\n                        <Form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                            <Row>\r\n                                <Col sm={Formvalue.image || preview_src != \"\" ? \"6\" : \"12\"}>\r\n\r\n                                    <FormGroup>\r\n                                        <label className=\"control-label\" htmlFor=\"title\">\r\n                                            Title *\r\n                                        </label>\r\n                                        <div className=\"mb-2\">\r\n                                            <input\r\n\r\n                                                value={Formvalue.name}\r\n                                                type=\"text\"\r\n                                                name=\"name\"\r\n                                                onChange={(e) => setFormvalue({ ...Formvalue, name: e.target.value })}\r\n                                                ref={register({ required: true })}\r\n                                                className=\"form-control\"\r\n                                            />\r\n                                        </div>\r\n                                        <span className=\"text-danger\">{errors.name && 'Title is required.'}</span>\r\n                                    </FormGroup>\r\n\r\n                                    {/* <FormGroup>\r\n                                        {console.log(new Date())}\r\n                                        <Label for=\"packageType\">Main Category *</Label>\r\n                                        {!props.editData ? <select\r\n\r\n                                            className=\"form-control\" name=\"packageTypeId\"\r\n                                            ref={register({ required: true })}\r\n                                            type=\"select\">\r\n                                            <option value=\"\">Select</option>\r\n                                            {packageTypeList.map((item, index) => (\r\n                                                <option key={index} value={item._id}>{item.name}</option>\r\n                                            ))}\r\n                                        </select> :\r\n                                            <input\r\n                                                value={props.editData?.packageTypeId?.title}\r\n                                                type=\"text\"\r\n                                                //    disabled={true}\r\n                                                name=\"packageTypeId\"\r\n                                                ref={register({ required: true })}\r\n                                                className=\"form-control\"\r\n                                            />}\r\n                                        <span className=\"text-danger\">{errors.packageTypeId && 'Please select package type'}</span>\r\n                                    </FormGroup> */}\r\n\r\n\r\n                                    <FormGroup>\r\n                                        <label className=\"control-label\" htmlFor=\"image\">\r\n                                            Image Cover\r\n                                        </label>\r\n\r\n                                        <div className=\"mb-2\">\r\n                                            <input\r\n                                                type=\"file\"\r\n\r\n\r\n                                                onChange={(e) => preview_image(e)}\r\n                                                name=\"image\"\r\n                                                ref={register({ required: props.editData ? false : true })}\r\n                                                className=\"form-control\"\r\n                                                accept=\"image/*\"\r\n\r\n                                            />\r\n                                        </div>\r\n                                        <span className=\"text-danger\">{errors.image && 'Image cover is required.'}</span>\r\n\r\n\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup>\r\n                                        <Button\r\n                                            className=\"button btn-info\"\r\n                                            style={{ backgroundColor: COLORS.primary, border: 0 }}\r\n                                            onClick={() => {\r\n                                                props.cancelEdit && props.cancelEdit()\r\n                                                setFormvalue(initialState)\r\n                                            }}\r\n                                            type=\"reset\" >\r\n                                            Reset\r\n                                        </Button>\r\n                                        <Button className=\"button btn-info ml-3\" style={{ backgroundColor: COLORS.black, border: 0 }} type=\"submit\">\r\n                                            Submit\r\n                                        </Button>\r\n                                    </FormGroup>\r\n\r\n                                </Col>\r\n\r\n                                {(!!props.editData && !!props.editData.image || (preview_src != \"\")) && <Col sm=\"6\" >\r\n                                    <img src={preview_src != \"\" ? preview_src : imgURL + props.editData.image} style={{ width: '80%', resizeMode: \"contain\", height: '60%' }} />\r\n                                </Col>}\r\n                            </Row>\r\n\r\n\r\n\r\n                        </Form>\r\n\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default PackageForm;\r\n"],"names":["props","useState","preview_src","set_preview_src","useForm","register","handleSubmit","errors","initialState","name","packageTypeId","image","Formvalue","setFormvalue","packageTypeListSelector","useSelector","state","package","packageTypeList","setPackageTypeList","dispatch","useDispatch","useEffect","length","getPackageType","editData","sm","className","onSubmit","data","Object","keys","formData","FormData","append","uploadMedia","fileUrl","obj","assign","editPackage","_id","updateList","cancelEdit","toast","createPackage","htmlFor","value","type","onChange","e","target","ref","required","img_preview","URL","createObjectURL","files","preview_image","accept","style","backgroundColor","COLORS","border","onClick","src","imgURL","width","resizeMode","height"],"sourceRoot":""}