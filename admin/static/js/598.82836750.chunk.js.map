{"version":3,"file":"static/js/598.82836750.chunk.js","mappings":"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","sources":["components/Pagination/Pagination.js","screen/users/campaignForm.js","screen/users/campaigns.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst Pagination = ({ nPages, currentPage, setCurrentPage }) => {\r\n\r\n    const pageNumbers = [...Array(nPages + 1).keys()].slice(1)\r\n\r\n\r\n\r\n    const nextPage = () => {\r\n        if (currentPage !== nPages) setCurrentPage(currentPage + 1)\r\n    }\r\n    \r\n    const prevPage = () => {\r\n        if (currentPage !== 1) setCurrentPage(currentPage - 1)\r\n    }\r\n    return (\r\n        <nav>\r\n            <ul className='pagination justify-content-center'>\r\n                <li className=\"page-item\">\r\n                    <a className=\"page-link\"\r\n                        onClick={prevPage}\r\n                        href='#!'>\r\n\r\n                        Previous\r\n                    </a>\r\n                </li>\r\n                {pageNumbers.map(pgNumber => (\r\n                    <li key={pgNumber}\r\n                        className={`page-item ${currentPage == pgNumber ? 'active' : ''} `} >\r\n\r\n                        <a onClick={() => setCurrentPage(pgNumber)}\r\n                            className='page-link'\r\n                            href='#!'>\r\n\r\n                            {pgNumber}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n                <li className=\"page-item\">\r\n                    <a className=\"page-link\"\r\n                        onClick={nextPage}\r\n                        href='#!'>\r\n\r\n                        Next\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Pagination","import React, { useEffect, useState, Fragment } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  Col,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  Row,\r\n} from \"reactstrap\";\r\n\r\nimport _, { set, toInteger, toNumber } from \"lodash\";\r\nimport Form from \"react-validation/build/form\";\r\nimport { COLORS } from \"../../colors\";\r\nimport { imgURL } from \"../../redux/config\";\r\nimport {\r\n  getAllMerchants,\r\n  uploadMedia,\r\n  createNewCampaign,\r\n  getAllCampaigns,\r\n  updateCampaign,\r\n  getPackage,\r\n  getPackageType,\r\n} from \"../../redux/actions\";\r\n// import { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport { IoTrashBinSharp } from \"react-icons/io5\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n// import selectedEmail from \"../../redux/email/SelectedEmail\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Slider from \"react-slick\";\r\nimport \"./style.css\";\r\n// import { setVisibilityFilterTodo } from \"../../redux/todos/Action\";\r\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\nimport draftToHtml from \"draftjs-to-html\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport parse from \"html-react-parser\";\r\nimport Swal from \"sweetalert2\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\n\r\nconst CampaignForm = (props) => {\r\n\r\n  // const { register, handleSubmit,\r\n  // formState: { isDirty, isValid, errors }, } = useForm({ mode: \"onBlur\" }); // initialise the hook\r\n\r\n\r\n  let initialState = {\r\n    city: [],\r\n    title: \"\",\r\n    description: \"\",\r\n    category: [],\r\n    subCategory: [],\r\n    image: [],\r\n    video: [],\r\n    start_date: \"\",\r\n    end_date: \"\",\r\n    offer: [],\r\n    // offer_title: \"\",\r\n    // offer_description: \"\",\r\n    // offer_price: \"\",\r\n    // offer_discount: \"\",\r\n    // offer_discounted_price:\"\",\r\n\r\n    merchant_businessName: \"\",\r\n    merchantId: \"\"\r\n  };\r\n  const [formValue, setFormValue] = useState(initialState);\r\n  const [errorObj, setErrorObj] = useState({});\r\n  const [newOffers, setNewOffers] = useState({});\r\n  const [editOffers, setEditOffers] = useState({});\r\n  const [modal, setModal] = useState(false);\r\n  const [editModal, setEditModal] = useState(false);\r\n  const [editIndex, setEditIndex] = useState(null);\r\n  const [editOfferDetails, setEditOfferDetails] = useState({});\r\n  const [video, setVideo] = useState(\"\");\r\n  const [pics, setPics] = useState([]);\r\n  const [selectedDetails, setSelectedDetails] = useState(null);\r\n  const [packageList, setPackageList] = useState([]);\r\n  const [packageTypeList, setPackageTypeList] = useState([]);\r\n  const [picsPreview, setPicsPreview] = useState([]);\r\n  const [videoDuration, setVideoDuration] = useState(\"\");\r\n  const [videoswitch, setVideoSwitch] = useState(false);\r\n\r\n\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const campaignsSelector = useSelector(\r\n    (state) => state.allCampaigns.data.data\r\n  );\r\n\r\n  // console.log(\"campaigns state\", campaignsSelector);\r\n\r\n  const packageTypeListSelector = useSelector(\r\n    (state) => state.package.packageTypeList\r\n  );\r\n\r\n\r\n\r\n  const packageListShow = useSelector(\r\n    (state) => state.package.packageList\r\n  );\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(getPackageType());\r\n    dispatch(getPackage());\r\n  }, [dispatch]);\r\n\r\n  // console.log(\r\n  //    \"packageTypeListSelector================\",\r\n  //     packageTypeListSelector\r\n  //    );\r\n\r\n\r\n\r\n  const getAllMerchantSelector = useSelector(\r\n    (state) => state.allMerchants.data.data\r\n  );\r\n\r\n  let media = new Audio(props.editData && imgURL + props.editData.video);\r\n  media.onloadedmetadata = function () {\r\n    console.log(\"sada\", Math.floor(media.duration) * 100);\r\n    setVideoDuration(Math.floor(media.duration) * 100); // this would give duration of the video/audio file\r\n  };\r\n  // console.log(\"my videooooo\", videoDuration);\r\n\r\n  const settings = {\r\n    dots: false,\r\n    autoplay: true,\r\n    infinite: true,\r\n    speed: 300,\r\n    slidesToShow: 1,\r\n  };\r\n\r\n  const settings1 = {\r\n    dots: false,\r\n    autoplay: true,\r\n    // infinite: true,\r\n    speed: { videoDuration },\r\n    slidesToShow: 1,\r\n  };\r\n  useEffect(() => {\r\n    if (props.editData) {\r\n      setFormValue(props.editData);\r\n    }\r\n  }, [props.editData]);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    if (props.editData) {\r\n      calculate_cities(props.editData?.merchant_businessName)\r\n\r\n    }\r\n\r\n    if (!campaignsSelector.length) {\r\n      dispatch(getAllCampaigns());\r\n      dispatch(getAllMerchants(() => { }))\r\n    }\r\n\r\n    // if (packageTypeListSelector.length) {\r\n\r\n    // setPackageTypeList(packageTypeListSelector);\r\n    // console.log(packageTypeList)\r\n    // }\r\n\r\n    if (props?.editData) {\r\n      setFormValue(props.editData);\r\n      console.log(\"editttttttt\", formValue);\r\n    }\r\n  }, [props.editData]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (!getAllMerchantSelector.length) {\r\n      dispatch(getAllMerchants(() => { }));\r\n    }\r\n  }, [dispatch, getAllMerchantSelector.length]);\r\n\r\n  // console.log(\"getAllMerchantSelector==========\", getAllMerchantSelector);\r\n\r\n  async function uploadMediaFile(file) {\r\n    console.log(file)\r\n    let formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    let fileUrl = \"\";\r\n    await dispatch(\r\n      uploadMedia(formData, (url) => {\r\n        fileUrl = url;\r\n        console.log(\"methos file--------------\", fileUrl);\r\n      })\r\n    );\r\n\r\n    // console.log(\"methos--------------\", fileUrl);\r\n    return fileUrl;\r\n  }\r\n\r\n\r\n\r\n\r\n  async function onSubmit(data) {\r\n    // console.log(\"123\", data);\r\n    // console.log(\"mm\", formValue);\r\n    // console.log(\"type\", typeof formValue.offer.offer_price);\r\n\r\n\r\n\r\n    if (formValue.category?.length < 1 || formValue.subCategory?.length < 1) {\r\n      if (formValue.category?.length < 1) {\r\n        let error = errorObj;\r\n        error.category = \"Atleast one category is required\";\r\n        toast.error(\"Atleast one category is required\")\r\n        setErrorObj(error);\r\n      }\r\n      else if (formValue.subCategory?.length < 1) {\r\n        let error = errorObj;\r\n        error.subCategory = \"Atleast one sub category is required\";\r\n        toast.error(\"Atleast one sub category is required\")\r\n\r\n        setErrorObj(error);\r\n      }\r\n      // return;\r\n    }\r\n\r\n\r\n    else {\r\n\r\n      if (!props.editData) {\r\n\r\n\r\n        setErrorObj({});\r\n\r\n        let images = [];\r\n        let obj = Object.assign({}, data);\r\n        // console.log(\"obj\", obj);\r\n        obj.campaign_title = formValue.campaign_title;\r\n        obj.description = formValue.description;\r\n        obj.category = formValue.category;\r\n        obj.subCategory = formValue.subCategory;\r\n        obj.campaign_start_date = formValue.campaign_start_date;\r\n        obj.campaign_end_date = formValue.campaign_end_date;\r\n        obj.offer = formValue.offer;\r\n        obj.merchant_businessName = formValue.merchant_businessName;\r\n        // obj.city = formValue.city;\r\n        obj.city = cities_name;\r\n        data.image = pics;\r\n        obj.merchantId = formValue.merchantId;\r\n\r\n\r\n        if (data.image.length) {\r\n          for (let index = 0; index < data.image.length; index++) {\r\n            const item = data.image[index];\r\n            // console.log(\"itemmmm\", item);\r\n            let imgURL = await uploadMediaFile(item);\r\n            console.log(item)\r\n\r\n            images.push(imgURL);\r\n          }\r\n        }\r\n\r\n        obj.image = images;\r\n\r\n        if (formValue.video.name) {\r\n          obj.video = await uploadMediaFile(video);\r\n        }\r\n\r\n        console.log(\"campaign obje--------------------\", obj);\r\n        // console.log(\"created\");\r\n        dispatch(createNewCampaign(obj), () => {\r\n          setFormValue(initialState);\r\n        });\r\n      }\r\n\r\n      if (props.editData) {\r\n\r\n\r\n\r\n        if (props.editData.video) {\r\n          formValue.video = await uploadMediaFile(video);\r\n          // console.log(video)\r\n        }\r\n\r\n        dispatch(updateCampaign(formValue, props.editData._id));\r\n      }\r\n\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const onSelectMainCategory = async (selectedList, selectedItem) => {\r\n    setFormValue({ ...formValue, category: selectedList });\r\n    let error = errorObj;\r\n    delete error.category;\r\n    setErrorObj(error);\r\n    let temp = [];\r\n    for (let index = 0; index < selectedList.length; index++) {\r\n      const item = selectedList[index];\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const onSelectSubCategory = async (selectedList, selectedItem) => {\r\n    setFormValue({ ...formValue, subCategory: selectedList });\r\n    let error = errorObj;\r\n    delete error.subCategory;\r\n    setErrorObj(error);\r\n  };\r\n\r\n\r\n\r\n\r\n  let cities_name = []\r\n  formValue.city.map(v => cities_name.push(v.location_city))\r\n\r\n\r\n\r\n  // const handleUpdate = () => {\r\n  //   console.log(props.editData._id);\r\n  //   if (props.editData) {\r\n  //     const formData = new FormData();\r\n  //     formData.append(\"title\", formValue.title);\r\n  //     formData.append(\"description\", formValue.description);\r\n  //     formData.append(\"category\", formValue.category);\r\n  //     formData.append(\"subCategory\", formValue.subCategory);\r\n  //     dispatch(updateCampaign(formData, props.editData._id));\r\n  //   } else {\r\n  //     dispatch(createNewCampaign());\r\n  //   }\r\n  // };\r\n\r\n  // console.log(\"campaign formValue======\", formValue);\r\n\r\n  const handleImageUpload = (e) => {\r\n    for (const file of e.target.files) {\r\n      // console.log(\"file>>>\", file);\r\n      const url = URL.createObjectURL(file);\r\n      // console.log(\"urlllllll\", url);\r\n      setPicsPreview((i) => [...i, url]);\r\n      console.log(\"preview\", picsPreview);\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      // reader.onload = () => {\r\n      setPics((imgs) => [...imgs, file]);\r\n      // };\r\n      reader.onerror = () => {\r\n        console.log(reader.error);\r\n      };\r\n\r\n    }\r\n\r\n    // console.log(\"picsssss\", pics, pics.length);\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleAddNewOffersSubmit = (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      let errorObj = {};\r\n      if (!newOffers.offer_title || newOffers.offer_title.length < 4) {\r\n        errorObj.offer_title = \"Invalid Title\";\r\n      }\r\n      if (!newOffers.offer_description) {\r\n        errorObj.offer_description = \"Please enter description\";\r\n      }\r\n      if (!newOffers.offer_price) {\r\n        errorObj.offer_price = \"Please enter price\";\r\n      }\r\n      if (!newOffers.offer_discount) {\r\n        errorObj.offer_discount = \"Please enter offer discount\";\r\n      }\r\n      console.log(\"vlueueee\", formValue);\r\n      // console.log(\"before push\", formValue.offer);\r\n      let temp = formValue.offer.slice(0);\r\n      temp.push(newOffers);\r\n      // console.log(\"pushed\", temp);\r\n      setFormValue({ ...formValue, offer: temp });\r\n      // setAddrErr({});\r\n      console.log(\"hjj\", formValue.offer);\r\n      setNewOffers({});\r\n      setModal(false);\r\n    } catch (error) { }\r\n  };\r\n\r\n\r\n\r\n  function opensweetalert() {\r\n    console.log(\"fire\");\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        handleRemoveOffer();\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  const [cities_of_selected_merchant, set_cities_of_selected_merchant] = useState([])\r\n\r\n\r\n\r\n  const calculate_cities = async (data) => {\r\n    // console.log(data)\r\n\r\n    // getAllMerchantSelector.map(v => v.businessName == data ? v.location.map(r => set_cities_of_selected_merchant([...cities_of_selected_merchant , r.location_city])) : console.log())\r\n    getAllMerchantSelector.map(v => v.businessName == data ? set_cities_of_selected_merchant(v.location) : console.log())\r\n\r\n    // if (sel) {\r\n    //   (sel[0]?.location.map(r => r.location_city ? set_cities_of_selected_merchant([...cities_of_selected_merchant, r.location_city]) : console.log()))\r\n\r\n    // }\r\n\r\n  }\r\n\r\n\r\n\r\n  const get_city_names = (e) => {\r\n\r\n    // e?.map(v => set_data({ ...data, city: [...data.city, v.location_city] }))\r\n\r\n\r\n\r\n    const names = e.map(function (city) {\r\n      return city.location_city;\r\n    });\r\n\r\n    // set_data({ ...data, city: names })\r\n    setFormValue({ ...formValue, city: names })\r\n  }\r\n\r\n\r\n\r\n\r\n  const handleRemoveOffer = (item, index) => {\r\n    let temp = formValue.offer.slice(0);\r\n    temp.splice(index, 1);\r\n    setFormValue({ ...formValue, offer: temp });\r\n  };\r\n\r\n\r\n\r\n  // console.log(\"edit data===============\", props.editData);\r\n  var today = new Date();\r\n  var dd = String(today.getDate()).padStart(2, '0');\r\n  var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n  var yyyy = today.getFullYear();\r\n\r\n\r\n\r\n  today = mm + '/' + dd + '/' + yyyy;\r\n\r\n\r\n\r\n\r\n\r\n  const renderAddOffers = () => {\r\n\r\n    return (\r\n\r\n      <Modal isOpen={modal}>\r\n\r\n        <ModalHeader>Add New Offer</ModalHeader>\r\n\r\n        <ModalBody>\r\n          {/* <Form onSubmit={(event) => handleAddNewOffersSubmit(event)}> */}\r\n\r\n          {/* <Form onSubmit={(event) => { event.preventDefault(); setFormValue({ ...formValue, offer: [...formValue.offer, newOffers] }); setModal(false) }}> */}\r\n\r\n          <Form>\r\n\r\n            <FormGroup>\r\n\r\n              <Label>Title</Label>\r\n              <Input\r\n                required\r\n                type=\"text\"\r\n                // name=\"title\"\r\n                // id=\"title\"\r\n                // defaultValue={props.editData.offer[0].offer_title}\r\n                onChange={(e) => {\r\n                  setNewOffers({ ...newOffers, offer_title: e.target.value });\r\n                  // setFormValue({...formValue,offer:{ ...newOffers }})\r\n                }}\r\n              />\r\n\r\n              {/* <span className=\"text-danger\">\r\n                {errors.offer_title && \"Title is required.\"}\r\n              </span> */}\r\n            </FormGroup>\r\n\r\n\r\n\r\n            <FormGroup>\r\n              <Label>Description</Label>\r\n              {/* <Input\r\n                type=\"textarea\"\r\n                rows=\"5\"\r\n                name=\"description\"\r\n                id=\"description\"\r\n                // defaultValue={props.editData.offer[0].offer_description}\r\n                onChange={(e) =>\r\n                  setNewOffers({\r\n                    ...newOffers,\r\n                    offer_description: e.target.value,\r\n                  })\r\n                }\r\n              /> */}\r\n\r\n              <CKEditor\r\n                required\r\n                name=\"description\"\r\n                // id=\"description\"\r\n                editor={ClassicEditor}\r\n                data={\r\n                  props.editData\r\n                    ? props.editData.offer.offer_description\r\n                    : formValue.offer.offer_description\r\n                }\r\n                onChange={(e, editor) => {\r\n                  const data = editor.getData();\r\n                  setNewOffers({\r\n                    ...newOffers,\r\n                    offer_description: data,\r\n                  });\r\n                }}\r\n              />\r\n\r\n              {/* <span className=\"text-danger\">\r\n                {errors.offer_description && \"Description is required.\"}\r\n              </span> */}\r\n            </FormGroup>\r\n\r\n\r\n\r\n            <FormGroup>\r\n              <Label >Price</Label>\r\n              <Input\r\n                type=\"number\"\r\n                min='0'\r\n                oninput=\"validity.valid||(value='');\"\r\n                // name=\"price\"\r\n                // id=\"price\"\r\n                required\r\n                // defaultValue={props.editData.offer[0].offer_price}\r\n                // defaultValue={props.editData.offer.length >0 && newOffers.editData.offer.offer_price}\r\n                onChange={(e) =>\r\n                  setNewOffers({\r\n                    ...newOffers,\r\n                    offer_price: parseFloat(e.target.value),\r\n                  })\r\n                }\r\n\r\n              />\r\n\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <Label>Discount %</Label>\r\n              <Input\r\n                type=\"flaot\"\r\n                // name=\"discount\"\r\n                required\r\n                // id=\"discount\"\r\n                // defaultValue={props.editData.offer.offer_discount}\r\n                onChange={(e) =>\r\n                  setNewOffers({ ...newOffers, offer_discount: e.target.value })\r\n                }\r\n\r\n              />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n\r\n\r\n              <Button className=\"ml-1\" onClick={(e) => { setFormValue({ ...formValue, offer: [...formValue.offer, newOffers] }); setModal(false) }} color=\"primary\">\r\n                Save\r\n              </Button>\r\n\r\n\r\n              <Button\r\n                color=\"secondary\"\r\n                className=\"ml-1\"\r\n                onClick={() => setModal(false)}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </FormGroup>\r\n\r\n\r\n          </Form>\r\n\r\n        </ModalBody>\r\n\r\n\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n\r\n\r\n  const toggle = () => {\r\n    setModal(!modal);\r\n  };\r\n\r\n\r\n  const handleEditOffer = (item, index) => {\r\n    console.log(\"item\", item);\r\n    setEditIndex(index);\r\n    setEditOfferDetails(item);\r\n    setEditModal(true);\r\n    setSelectedDetails(item);\r\n    console.log(\"55\", selectedDetails);\r\n  };\r\n\r\n\r\n\r\n  const handleSubmitEditOffer = (e) => {\r\n    e.preventDefault();\r\n    let temp = formValue.offer.slice(0);\r\n    temp[editIndex] = newOffers;\r\n    setFormValue({ ...formValue, offer: temp });\r\n    setEditModal(false);\r\n  };\r\n\r\n\r\n\r\n  const renderEditOffer = (selectedDetails) => {\r\n    return (\r\n\r\n      <Modal isOpen={editModal} toggle={() => editToggle}>\r\n        <ModalHeader toggle={() => editToggle}>Edit Offer</ModalHeader>\r\n        <ModalBody>\r\n          <Form\r\n            // onSubmit={(event) => handleSubmitEditOffer(event, formValue.offer)}\r\n            onSubmit={(event) => { handleSubmitEditOffer(event, formValue.offer) }}\r\n          >\r\n            <FormGroup>\r\n              <Label for=\"title\">Title</Label>\r\n\r\n              <Input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                id=\"title\"\r\n                // defaultValue={props.editData.offer.offer_title}\r\n                defaultValue={selectedDetails && selectedDetails.offer_title}\r\n                onChange={(e) =>\r\n                  setNewOffers({ ...newOffers, offer_title: e.target.value })\r\n                }\r\n              />\r\n\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"description\">Description</Label>\r\n              <CKEditor\r\n                name=\"description\"\r\n                id=\"description\"\r\n\r\n                // defaultValue={\r\n                //   selectedDetails && selectedDetails.offer_description\r\n                // }\r\n\r\n                editor={ClassicEditor}\r\n                data={\r\n                  selectedDetails?.offer_description\r\n                  // props.editData\r\n                  //   ? props.editData.offer.offer_description\r\n                  //   : formValue.offer.offer_description\r\n                }\r\n                //\r\n\r\n                // wrapperStyle={{ width: 470, border: \"1px solid black\" }}\r\n                onChange={(e, editor) => {\r\n                  const data = editor.getData();\r\n                  setNewOffers({\r\n                    ...newOffers,\r\n                    offer_description: data,\r\n                  });\r\n                }}\r\n              />\r\n\r\n              {/* {props.editData &&\r\n                console.log(\r\n                  \"777\",\r\n                  props.editData.offer.map((i) => i.offer_description)\r\n                )} */}\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"price\">Price</Label>\r\n              <Input\r\n                type=\"float\"\r\n                name=\"price\"\r\n                id=\"price\"\r\n                // defaultValue={props.editData.offer[0].offer_price}\r\n                defaultValue={selectedDetails && selectedDetails.offer_price}\r\n                defaultChecked={newOffers.offer_price}\r\n                onChange={(e) =>\r\n                  setNewOffers({\r\n                    ...newOffers,\r\n                    offer_price: parseFloat(e.target.value),\r\n                  })\r\n                }\r\n              />\r\n\r\n\r\n\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"discount\">Discount %</Label>\r\n              <Input\r\n                type=\"float\"\r\n                name=\"discount\"\r\n                id=\"discount\"\r\n                // defaultValue={props.editData.offer.offer_discount}\r\n                defaultValue={selectedDetails && selectedDetails.offer_discount}\r\n                onChange={(e) =>\r\n                  setNewOffers({ ...newOffers, offer_discount: e.target.value })\r\n                }\r\n              />\r\n            </FormGroup>\r\n\r\n            <FormGroup>\r\n              <Button style={{ backgroundColor: COLORS.black }} type=\"submit\">\r\n                Update\r\n              </Button>\r\n              <Button\r\n                color=\"secondary\"\r\n                className=\"ml-1\"\r\n                onClick={() => editToggle()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n\r\n    );\r\n  };\r\n\r\n\r\n\r\n\r\n  async function uploadMediaFile(file, cb) {\r\n\r\n    let formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    let fileUrl = \"\";\r\n    await dispatch(\r\n      uploadMedia(formData, (url) => {\r\n        fileUrl = url;\r\n        cb(url)\r\n      })\r\n    );\r\n\r\n    // console.log(\"methos--------------\", fileUrl);\r\n    return fileUrl;\r\n  }\r\n\r\n\r\n\r\n  const editToggle = () => {\r\n    setEditModal(!editModal);\r\n  };\r\n\r\n\r\n\r\n  const submitForm = () => {\r\n    if (formValue.category?.length < 1 || formValue.subCategory?.length < 1 || formValue.offer?.length < 1 || formValue.description == \"\" || formValue.image.length < 1 || formValue.city.length < 1) {\r\n      if (formValue.category?.length < 1) {\r\n        toast.error(\"Select atleast one Category\")\r\n      }\r\n      else if (formValue.subCategory?.length < 1) {\r\n        toast.error(\"Select atleast one Sub Category\")\r\n      }\r\n      else if (formValue.offer?.length < 1) {\r\n        toast.error(\"Create atleast one Offer\")\r\n      }\r\n\r\n      else if (formValue.description == \"\") {\r\n        toast.error(\"Please Enter Description\")\r\n      }\r\n\r\n      else if (formValue.image?.length < 1) {\r\n        toast.error(\"Select atleast one image\")\r\n      }\r\n\r\n      else if (formValue.city?.length < 1) {\r\n        toast.error(\"Select atleast one City\")\r\n      }\r\n      \r\n\r\n    }\r\n\r\n\r\n    else {\r\n      if (props.editData) {\r\n        dispatch(updateCampaign(formValue, props.editData._id , () => toast.success(\"Campaign Updated\")));\r\n\r\n      }\r\n      else {\r\n        dispatch(createNewCampaign(formValue, () => { }))\r\n      }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  // console.log(formValue)\r\n\r\n  return (\r\n    <>\r\n\r\n      {renderAddOffers()}\r\n\r\n\r\n      {renderEditOffer(selectedDetails)}\r\n\r\n\r\n\r\n      <Row>\r\n        <Col sm={12}>\r\n          <Card>\r\n\r\n            <CardTitle className=\"card-title-custom p-3 border-bottom mb-0\">\r\n              <i className=\"mdi mdi-alert-box mr-2\" />\r\n\r\n              {props.editData\r\n                ? props.editData.title.charAt(0).toUpperCase() +\r\n                props.editData.title.slice(1) +\r\n                \" |  Edit Campaign\"\r\n                : \"Add Campaign\"}\r\n\r\n            </CardTitle>\r\n\r\n            <CardBody>\r\n\r\n\r\n              {/* <Form id={\"campaign-form\"} onSubmit={handleSubmit(onSubmit)}> */}\r\n              <Form onSubmit={(e) => { e.preventDefault(); submitForm() }}>\r\n\r\n                <h5>Campaign Details</h5>\r\n\r\n                <div>\r\n\r\n\r\n                  <Row>\r\n\r\n                    {/* {console.log(\"edit\", props.editData)} */}\r\n                    {props.editData && (\r\n\r\n\r\n                      <Col md={6}>\r\n                        <div\r\n                          style={{\r\n                            marginTop: \"180px\",\r\n                            marginLeft: \"30px\",\r\n                            marginBottom: \"20px\",\r\n                          }}\r\n                        >\r\n                          {/* Defined a video switch which allows the video to be played just once and\r\nwhen the video finishes the slider shifts to show the images only\r\n*/}\r\n                          <Slider {...settings}>\r\n                            {props.editData.video.length > 0 &&\r\n                              props.editData.video[0] !== \"\"\r\n                              ? !videoswitch && (\r\n                                <Slider {...settings1}>\r\n                                  <video\r\n                                    muted\r\n                                    //  loop\r\n                                    autoPlay\r\n                                    style={{\r\n                                      width: \"130%\",\r\n                                      height: 225,\r\n                                      marginLeft: \"-120px\",\r\n                                    }}\r\n                                    onPlay={() => setVideoSwitch(false)}\r\n                                    onPause={() => setVideoSwitch(true)}\r\n                                  >\r\n                                    {/* {console.log(\"on edit3\", props.editData.video[0])} */}\r\n                                    <source\r\n                                      src={imgURL + props.editData.video}\r\n                                      type=\"video/mp4\"\r\n                                    />\r\n                                  </video>\r\n                                </Slider>\r\n                              )\r\n                              : \"\"}\r\n                            {/* {console.log(\"nbbbn\", props.editData.video[0])} */}\r\n                            {props.editData.video.length == 0\r\n                              ? !videoswitch &&\r\n                              props.editData.image.map((i, index) => (\r\n                                <div key={index}>\r\n                                  <img\r\n                                    alt=\"name\"\r\n                                    src={imgURL + i}\r\n                                    style={{ width: 400, height: 300 }}\r\n                                  />\r\n                                  <div\r\n                                    style={{\r\n                                      position: \"absolute\",\r\n                                      top: \"0px\",\r\n                                    }}\r\n                                  >\r\n                                    <Button\r\n                                      onClick={\r\n                                        () => {\r\n                                          const filterIndex =\r\n                                            props.editData.image.indexOf(i);\r\n                                          if (filterIndex > -1) {\r\n                                            props.editData.image.splice(\r\n                                              filterIndex,\r\n                                              1\r\n                                            );\r\n                                            setPics(\r\n                                              props.editData.image.filter(\r\n                                                (img, i) => i !== img\r\n                                              )\r\n                                            );\r\n                                          }\r\n                                        }\r\n                                        // handleRemoveImage(i, index)\r\n                                      }\r\n                                    >\r\n                                      X\r\n                                    </Button>\r\n\r\n                                  </div>\r\n                                </div>\r\n                              ))\r\n                              : props.editData.image.map((i, index) => (\r\n                                <div key={index}>\r\n                                  <img\r\n                                    alt=\"name\"\r\n                                    src={imgURL + i}\r\n                                    style={{ width: 400, height: 300 }}\r\n                                  />\r\n                                  <div\r\n                                    style={{\r\n                                      position: \"absolute\",\r\n                                      top: \"0px\",\r\n                                    }}\r\n                                  >\r\n                                    <Button\r\n                                      onClick={\r\n                                        () => {\r\n                                          const filterIndex =\r\n                                            props.editData.image.indexOf(i);\r\n                                          if (filterIndex > -1) {\r\n                                            props.editData.image.splice(\r\n                                              filterIndex,\r\n                                              1\r\n                                            );\r\n                                            setPics(\r\n                                              props.editData.image.filter(\r\n                                                (img, i) => i !== img\r\n                                              )\r\n                                            );\r\n                                          }\r\n                                        }\r\n                                        // handleRemoveImage(i, index)\r\n                                      }\r\n                                    >\r\n                                      X\r\n                                    </Button>\r\n                                  </div>\r\n                                </div>\r\n                              ))}\r\n                          </Slider>\r\n\r\n\r\n\r\n                        </div>\r\n                      </Col>\r\n\r\n                    )}\r\n\r\n\r\n\r\n                    <Col md={props.editData ? 6 : 12} className=\"mt-4\">\r\n\r\n\r\n                      <Col sm={12}>\r\n                        {/*sm={Formvalue.image ? \"6\" : \"12\"}*/}\r\n                        <FormGroup>\r\n                          <label className=\"control-label\" htmlFor=\"image\">\r\n                            Title *\r\n                          </label>\r\n\r\n                          <div className=\"mb-2\">\r\n                            <input\r\n                              required\r\n                              type=\"text\"\r\n                              name=\"title\"\r\n                              // value={formValue.title}\r\n                              defaultValue={formValue.title}\r\n\r\n                              onChange={(e) =>\r\n\r\n                                setFormValue({\r\n                                  ...formValue,\r\n                                  title: e.target.value,\r\n\r\n                                })\r\n                              }\r\n                              // ref={register({ required: true })}\r\n                              className=\"form-control\"\r\n                            />\r\n                          </div>\r\n\r\n                        </FormGroup>\r\n                      </Col>\r\n\r\n                      <Col sm={12}>\r\n                        <FormGroup>\r\n\r\n                          <Label for=\"packageType\">Category *</Label>\r\n                          <Multiselect\r\n\r\n                            required\r\n                            // options={packageTypeListSelector} // Options to display in the dropdown\r\n                            options={packageListShow}\r\n                            selectedValues={formValue.category || []} // Preselected value to persist in dropdown\r\n                            onSelect={onSelectMainCategory} // Function will trigger on select event\r\n                            onRemove={(e) => setFormValue({ ...formValue, category: e })}\r\n                            displayValue=\"name\" // Property name to display in the dropdown options\r\n                          />\r\n\r\n                        </FormGroup>\r\n\r\n                      </Col>\r\n\r\n                      <Col sm={12}>\r\n\r\n                        <FormGroup>\r\n                          <Label for=\"packageType\">Sub Category *</Label>\r\n                          <Multiselect\r\n                            // options={packageListShow} // Options to display in the dropdown\r\n                            options={packageTypeListSelector}\r\n                            selectedValues={formValue.subCategory || []} // Preselected value to persist in dropdown\r\n                            onSelect={onSelectSubCategory} // Function will trigger on select event\r\n                            onRemove={(e) => setFormValue({ ...formValue, subCategory: e })} // Function will trigger on remove event\r\n                            displayValue=\"name\" // Property name to display in the dropdown options\r\n                          />\r\n\r\n                        </FormGroup>\r\n                      </Col>\r\n\r\n                      <Col sm={12}>\r\n                        <FormGroup>\r\n                          <label className=\"control-label\" htmlFor=\"image\">\r\n                            Upload Image\r\n                          </label>\r\n\r\n                          <div className=\"mb-2\">\r\n                            <input\r\n                              multiple\r\n                              type=\"file\"\r\n                              name=\"image\"\r\n                              // pics={pics}\r\n                              accept=\"image/*\"\r\n                              // ref={register({\r\n                              //   required: props.editData ? false : true,\r\n                              // })}\r\n\r\n                              className=\"form-control\"\r\n                              defaultValue={formValue.image}\r\n                              onChange={(e) => uploadMediaFile(e.target.files[0], (res) => setFormValue({ ...formValue, image: [...formValue.image, res] }))}\r\n\r\n                            />\r\n\r\n                            {formValue?.image.length > 0 &&\r\n                              formValue?.image?.map((link) => (\r\n                                <img\r\n                                  alt=\"preview\"\r\n                                  style={{\r\n                                    width: \"22px\",\r\n                                    height: \"22px\",\r\n                                    padding: \"0 1px\",\r\n                                  }}\r\n                                  src={imgURL + link}\r\n                                />\r\n                              ))}\r\n\r\n\r\n                          </div>\r\n\r\n\r\n                        </FormGroup>\r\n                      </Col>\r\n\r\n\r\n                      <Col sm={12}>\r\n                        <FormGroup>\r\n                          <label className=\"control-label\" htmlFor=\"video\">\r\n                            Upload Video\r\n                          </label>\r\n\r\n                          <div className=\"mb-2\">\r\n\r\n                            <input\r\n                              type=\"file\"\r\n                              name=\"video\"\r\n                              accept=\"video/*\"\r\n                              className=\"form-control\"\r\n                              // ref={register({\r\n                              //   required: props.editData ? false : false,\r\n                              // })}\r\n                              defaultValue={formValue.video}\r\n                              onChange={(e) => {\r\n                                // setVideo(e.target.files[0]);\r\n                                // console.log(\"my vid\", e.target.files[0]);\r\n\r\n                                uploadMediaFile(e.target.files[0], (res) => { setFormValue({ ...formValue, video: [...formValue.video, res] }) })\r\n\r\n                              }}\r\n                            />\r\n\r\n\r\n                            {formValue?.video.length > 0 &&\r\n                              formValue?.video?.map((link) => (\r\n                                <img\r\n                                  alt=\"preview\"\r\n                                  style={{\r\n                                    width: \"22px\",\r\n                                    height: \"22px\",\r\n                                    padding: \"0 1px\",\r\n                                  }}\r\n                                  src={imgURL + link}\r\n                                />\r\n                              ))}\r\n                          </div>\r\n                          {/* \r\n                          <span className=\"text-danger\">\r\n                            {video.size > 2000000 && \"File size exceeded.\"}\r\n                          </span> */}\r\n\r\n                        </FormGroup>\r\n                      </Col>\r\n\r\n\r\n                      <Col sm={12}>\r\n                        <FormGroup>\r\n                          <label className=\"control-label\" htmlFor=\"start_date\">\r\n                            Start Date *\r\n                          </label>\r\n                          <div className=\"mb-2\">\r\n                            <input\r\n                              required\r\n                              min={new Date()?.toISOString()?.split('T')[0]}\r\n\r\n                              type=\"date\"\r\n                              name=\"start_date\"\r\n\r\n                              // value={formValue.start_date}\r\n                              defaultValue={formValue.start_date}\r\n                              onChange={(e) =>\r\n                                setFormValue({\r\n                                  ...formValue,\r\n                                  start_date: e.target.value,\r\n                                })\r\n                              }\r\n                              // ref={register({ required: true })}\r\n                              className=\"form-control\"\r\n                            />\r\n                          </div>\r\n\r\n                        </FormGroup>\r\n                      </Col>\r\n\r\n                      <Col sm={12}>\r\n                        <FormGroup>\r\n                          <label className=\"control-label\" htmlFor=\"end_date\">\r\n                            End Date *\r\n                          </label>\r\n                          <div className=\"mb-2\">\r\n                            <input\r\n                              required\r\n                              disabled={formValue.start_date == \"\" ? true : false}\r\n                              min={formValue.start_date}\r\n                              type=\"date\"\r\n                              name=\"end_date\"\r\n                              // value={formValue.end_date}\r\n                              onChange={(e) =>\r\n                                setFormValue({\r\n                                  ...formValue,\r\n                                  end_date: e.target.value,\r\n                                })\r\n                              }\r\n                              defaultValue={formValue.end_date}\r\n                              // ref={register({ required: true })}\r\n                              className=\"form-control\"\r\n                            />\r\n                          </div>\r\n\r\n                        </FormGroup>\r\n                      </Col>\r\n\r\n\r\n                      {/* <Row style={{ margin: \"auto\" }}> */}\r\n                      <Col sm={12}>\r\n                        <FormGroup>\r\n                          <label className=\"control-label\" htmlFor=\"end_date\">\r\n                            Select Merchant *\r\n                          </label>\r\n                          <div className=\"mb-2\">\r\n                            {!props.editData ? (\r\n                              <select\r\n\r\n                                required\r\n                                name=\"select_merchant\"\r\n                                onChange={(e) => {\r\n\r\n                                  set_cities_of_selected_merchant([])\r\n\r\n                                  setFormValue({\r\n                                    ...formValue,\r\n                                    merchant_businessName: e.target.value,\r\n                                    merchantId: getAllMerchantSelector?.find(v => v.businessName == e.target.value)?._id\r\n                                  });\r\n                                  // setFormValue({ ...formValue, merchantId: getAllMerchantSelector?.find(v => v.businessName == e.target.value)?._id })\r\n                                  calculate_cities(e.target.value)\r\n\r\n                                }\r\n                                }\r\n\r\n                                value={formValue.merchant_businessName}\r\n                                defaultValue={formValue.merchant_businessName}\r\n                                // ref={register({ required: true })}\r\n                                className=\"form-control\"\r\n                              >\r\n                                <option selected disabled value=\"\">Select</option>\r\n                                {getAllMerchantSelector &&\r\n                                  getAllMerchantSelector.map((m, index) => (\r\n\r\n\r\n                                    <option key={index}>\r\n\r\n                                      {m.profile && m.profile.businessName}\r\n\r\n                                    </option>\r\n\r\n\r\n                                  ))}\r\n                              </select>\r\n\r\n                            ) : (\r\n\r\n                              <input\r\n                                value={formValue.merchant_businessName}\r\n                                type=\"text\"\r\n                                disabled={true}\r\n                                name=\"select_merchant\"\r\n                                // ref={register({ required: true })}\r\n                                className=\"form-control\"\r\n                              />\r\n                            )}\r\n                          </div>\r\n\r\n                        </FormGroup>\r\n                      </Col>\r\n\r\n\r\n\r\n                      <Col sm={12}>\r\n                        <FormGroup>\r\n\r\n                          <label className=\"control-label\" htmlFor=\"end_date\">\r\n                            Select City *\r\n                          </label>\r\n                          <div className=\"mb-2\">\r\n                            {/* {console.log(formValue.city)} */}\r\n\r\n                            {/* <select\r\n\r\n                              required\r\n                              name=\"select_city\"\r\n                              onChange={(e) =>\r\n                                setFormValue({\r\n                                  ...formValue,\r\n                                  city: e.target.value,\r\n                                })\r\n                              }\r\n                              value={formValue.city}\r\n                              defaultValue={formValue.city}\r\n                              ref={register({ required: true })}\r\n                              className=\"form-control\"\r\n                            >\r\n                              <option selected disabled value=\"\">Select</option>\r\n                              {\r\n                                cities_of_selected_merchant.map((m, index) => (\r\n                                  <option key={index}>\r\n                                    {m}\r\n                                  </option>\r\n\r\n\r\n                                ))}\r\n                            </select> */}\r\n\r\n\r\n                            <Multiselect\r\n                              // options={packageListShow} // Options to display in the dropdown\r\n                              options={cities_of_selected_merchant}\r\n                              // selectedValues={\"karachi\"}\r\n                              selectedValues={cities_of_selected_merchant.filter(v => v.location_city == props?.editData?.city.map(r => r))} // Preselected value to persist in dropdown\r\n\r\n                              onSelect={(e) => {\r\n                                get_city_names(e)\r\n\r\n                              }\r\n\r\n                              }\r\n\r\n\r\n                              onRemove={(e) => {\r\n                                get_city_names(e)\r\n                              }}\r\n\r\n                              displayValue=\"location_city\" // Property name to display in the dropdown options\r\n\r\n                            />\r\n\r\n                          </div>\r\n\r\n\r\n                        </FormGroup>\r\n                      </Col>\r\n\r\n\r\n\r\n                      <Col sm={12}>\r\n                        <FormGroup>\r\n\r\n                          <label className=\"control-label\" htmlFor=\"firstname\">\r\n                            Description *\r\n                          </label>\r\n                          <div className=\"mb-2\">\r\n                            <CKEditor\r\n                              required\r\n                              name=\"description\"\r\n                              id=\"description\"\r\n                              editor={ClassicEditor}\r\n                              data={\r\n                                props.editData\r\n                                  ? props.editData.description\r\n                                  : formValue.description\r\n                              }\r\n                              //  content={props.editData ? props.editData.description : formValue.description}\r\n                              //  content={ formValue.description}\r\n\r\n                              onChange={(e, editor) => {\r\n                                const data = editor.getData();\r\n                                setFormValue({\r\n                                  ...formValue,\r\n                                  description: data,\r\n                                });\r\n                              }}\r\n                            />\r\n\r\n                            {/* <input\r\n                              type=\"text\"\r\n                              name=\"description\"\r\n                              onChange={(e) =>{\r\n                             \r\n                               setFormValue({\r\n                                  ...formValue,\r\n                                  description: e.target.value,\r\n                                })\r\n                               }\r\n                              }\r\n                               \r\n                              defaultValue={formValue.description}\r\n                              ref={register({ required: true })}\r\n                             className=\"form-control\"\r\n                           />  */}\r\n                          </div>\r\n\r\n                        </FormGroup>\r\n                      </Col>\r\n                      {/* </Row> */}\r\n\r\n\r\n\r\n                    </Col>\r\n\r\n\r\n\r\n                  </Row>\r\n\r\n\r\n                  <Row>\r\n                    <Col sm={12}>\r\n                      <Button\r\n                        color=\"skyblue\"\r\n                        className=\"mb-2\"\r\n                        type=\"button\"\r\n                        onClick={() => setModal(true)}\r\n                      >\r\n                        Add New Offer\r\n                      </Button>\r\n\r\n                      <Row>\r\n                        {formValue.offer\r\n                          ? formValue.offer.map((item, index) => (\r\n                            <>\r\n                              <Col sm={3} className=\"card p-2 mt-3 ml-3\">\r\n                                <p>\r\n                                  {/* Title: */}\r\n                                  <span\r\n                                    style={{\r\n                                      fontWeight: \"bold\",\r\n                                      fontSize: \"18px\",\r\n                                      color: COLORS.primary,\r\n                                    }}\r\n                                  >\r\n                                    {item.offer_title}\r\n                                  </span>{\" \"}\r\n                                </p>\r\n                                <p>\r\n                                  {/* Description:{\" \"} */}\r\n                                  <span>\r\n                                    {item.offer_description &&\r\n                                      parse(item.offer_description)}\r\n                                  </span>{\" \"}\r\n                                </p>\r\n                                <p>\r\n                                  Price: <span>{item.offer_price}</span>{\" \"}\r\n                                </p>\r\n                                {item.offer_discount > 0 && (\r\n                                  <p>\r\n                                    Discount:{\" \"}\r\n                                    <span className=\"discount-badge\">\r\n                                      {item.offer_discount} %\r\n                                    </span>{\" \"}\r\n                                  </p>\r\n                                )}\r\n\r\n                                <p>\r\n                                  Discounted Price:{\" \"}\r\n                                  <span>\r\n                                    {item.offer_price -\r\n                                      item.offer_price *\r\n                                      (item.offer_discount / 100)}{\" \"}\r\n                                  </span>{\" \"}\r\n                                </p>\r\n                                <div className={\"d-flex\"}>\r\n                                  <Button\r\n                                    className=\"btn btn-icon btn-light text-danger w-50 mr-2\"\r\n                                    onClick={() => opensweetalert()}\r\n                                  >\r\n                                    Remove\r\n                                    <IoTrashBinSharp\r\n                                      size={18}\r\n                                      color={COLORS.danger}\r\n                                    />\r\n                                  </Button>\r\n\r\n                                  <Button\r\n                                    className=\"btn btn-icon btn-light text-danger w-50\"\r\n                                    onClick={() => {\r\n                                      handleEditOffer(item, index);\r\n                                    }}\r\n                                  >\r\n                                    Edit\r\n                                    <IoTrashBinSharp\r\n                                      size={18}\r\n                                      color={COLORS.primary}\r\n                                    />\r\n                                  </Button>\r\n                                </div>\r\n                              </Col>\r\n                            </>\r\n                          ))\r\n                          : \"Loading...\"}\r\n                      </Row>\r\n\r\n\r\n                    </Col>\r\n                  </Row>\r\n\r\n\r\n                </div>\r\n\r\n\r\n                <FormGroup>\r\n                  <Button\r\n                    className=\"button btn-info\"\r\n                    style={{\r\n                      backgroundColor: COLORS.primary,\r\n                      width: 120,\r\n                      border: 0,\r\n                    }}\r\n                    onClick={() => {\r\n                      props.cancelEdit && props.cancelEdit();\r\n                      setFormValue(initialState);\r\n                    }}\r\n                    type=\"reset\"\r\n                  >\r\n                    Reset\r\n                  </Button>\r\n\r\n                  <Button\r\n                    className=\"button btn-info ml-4\"\r\n                    style={{\r\n                      backgroundColor: COLORS.black,\r\n                      width: 120,\r\n                      border: 0,\r\n                    }}\r\n                    type=\"submit\"\r\n                  // disabled={!isDirty || !isValid}\r\n                  // onClick={props.editData ? handleUpdate : handleSubmit}\r\n                  >\r\n                    {props.editData ? \"Update\" : \"Submit\"}\r\n                  </Button>\r\n                </FormGroup>\r\n\r\n\r\n\r\n                <Col sm={6}></Col>\r\n              </Form>\r\n\r\n\r\n            </CardBody>\r\n\r\n\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n\r\n\r\n      {/* <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      /> */}\r\n\r\n\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CampaignForm;","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Col,\r\n  Row,\r\n  CardBody,\r\n  CardTitle,\r\n  Label,\r\n  Table,\r\n  Button,\r\n  FormGroup,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport AvatarImage from \"../../assets/images2/avatar.png\";\r\nimport { IoSearchSharp } from \"react-icons/io5\";\r\nimport { COLORS } from \"../../colors\";\r\nimport CampaignForm from \"./campaignForm\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  deleteCampaign,\r\n  getAllCampaigns,\r\n  updateCampaign,\r\n} from \"../../redux/actions\";\r\nimport Pagination from \"../../components/Pagination/Pagination\";\r\nimport { imgURL } from \"../../redux/config\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Slider from \"react-slick\";\r\n\r\n\r\nconst Campaigns = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [selectedDetails, setSelectedDetails] = useState(null);\r\n  const [campaignStatus, setCampaignStatus] = useState([]);\r\n  const [editDetails, setEditDetails] = useState(null);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [recordsPerPage] = useState(15);\r\n  const campaignsSelector = useSelector(\r\n    (state) => state.allCampaigns.data.data\r\n  );\r\n\r\n\r\n  const filterList = (e) => {\r\n    setSearchValue(e.target.value);\r\n    filterResults();\r\n  };\r\n\r\n\r\n  const filterResults = () => {\r\n\r\n    const filtered = campaignsSelector.filter((product) =>\r\n      product.merchant_businessName.toLowerCase().includes(searchValue)\r\n    );\r\n    setTableData(filtered);\r\n\r\n  };\r\n\r\n  const indexOfLastRecord = currentPage * recordsPerPage;\r\n  const indexOfFirstRecord = indexOfLastRecord - recordsPerPage;\r\n  const currentRecords = tableData.slice(indexOfFirstRecord, indexOfLastRecord);\r\n  const nPages = searchValue ? Math.ceil(tableData.length / recordsPerPage)\r\n    : Math.ceil(campaignsSelector.length / recordsPerPage)\r\n\r\n  const currentCampaigns = campaignsSelector.slice(indexOfFirstRecord, indexOfLastRecord);\r\n\r\n\r\n\r\n  useEffect(async () => {\r\n    dispatch(getAllCampaigns());\r\n  }, []);\r\n\r\n  const handleDelete = async (e, id) => {\r\n    const confirm = window.confirm(\"Are You Sure?\");\r\n    if (confirm === true) {\r\n      const thisClickedDelete = e.currentTarget;\r\n      thisClickedDelete.innerText = \"Deleting...\";\r\n      await dispatch(deleteCampaign(id));\r\n      thisClickedDelete.closest(\"tr\").remove();\r\n    }\r\n  };\r\n\r\n  // console.log(\"selected details======= \", selectedDetails);\r\n\r\n\r\n  const updateStatus = (item) => {\r\n    let obj = {\r\n      campaignStatus: item.campaignStatus === \"active\" ? \"inactive\" : \"active\",\r\n    };\r\n    // console.log(\"id user campaign: \", item._id);\r\n    // console.log(\"campaign status============\", obj);\r\n    dispatch(updateCampaign(obj, item._id, (data) => setCampaignStatus(data)));\r\n  };\r\n\r\n\r\n  const renderSelectedUser = () => {\r\n    let data = selectedDetails;\r\n    const settings = {\r\n      dots: false,\r\n      autoplay: true,\r\n      infinite: true,\r\n      speed: 500,\r\n      slidesToShow: 1,\r\n      slidesToScroll: 1,\r\n    };\r\n    console.log(\"uy\", selectedDetails);\r\n    console.log(\"new\", selectedDetails.image);\r\n    return (\r\n      <>\r\n\r\n        <Card>\r\n          <CardTitle\r\n            className=\"border-bottom p-3 mb-0\"\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n          >\r\n            <div>\r\n              <i className=\"mdi mdi-border-none mr-2\"> </i>\r\n              {data.title.charAt(0).toUpperCase() + data.title.slice(1)} |\r\n              Campaign Details\r\n            </div>\r\n            <div>\r\n              <Button\r\n                className=\"btn btn-primary\"\r\n                style={{\r\n                  backgroundColor: COLORS.black,\r\n                  borderColor: COLORS.black,\r\n                  borderRadius: 4,\r\n                  alignItems: \"center\",\r\n                  height: \"fit-content\",\r\n                }}\r\n                onClick={() => setSelectedDetails(null)}\r\n              >\r\n                <i className=\"fa fa-arrow-left mr-2\"> </i>Back\r\n              </Button>\r\n            </div>\r\n          </CardTitle>\r\n          <CardBody>{data.description}</CardBody>\r\n\r\n          <div>\r\n            <Row>\r\n              <Col md={6}>\r\n                <div style=\r\n                  {{\r\n                    marginTop: \"20px\",\r\n                    marginLeft: \"30px\",\r\n                    marginBottom: \"20px\",\r\n                  }}>\r\n\r\n                  <Slider {...settings}>\r\n                    {/* <div\r\n                    style= {{ height: \"20px\",\r\n                     marginLeft: \"30px\",\r\n                     marginBottom:\"20px\",\r\n                      }}\r\n                    ><h2>hello</h2></div> */}\r\n                    {data.image.map((i, index) => (\r\n                      //  {image.map((i, index) => (\r\n                      <div key={index}>\r\n                        {console.log(\"sdad\", i)}\r\n                        <img\r\n                          alt=\"name\"\r\n                          src={i}\r\n                          style={{ width: 500, height: 280 }}\r\n                        />\r\n                      </div>\r\n                    ))}\r\n                  </Slider>\r\n                </div>\r\n              </Col>\r\n\r\n              <Col md={6} className=\"mt-4\">\r\n                <Label style={{ marginTop: \"30px\" }}>{data.campaignStatus}</Label>\r\n                <br />\r\n                <Label style={{ fontWeight: \"bold\" }}>\r\n                  {data.title.charAt(0).toUpperCase() + data.title.slice(1)}\r\n                </Label>\r\n                <br />\r\n                <Label>{data.end_date} </Label>\r\n                <br />\r\n                <Label>{data.end_date}</Label>\r\n                <br />\r\n                <Label style={{ fontWeight: \"bold\" }}>\r\n                  {data.merchant_businessName.charAt(0).toUpperCase() +\r\n                    data.merchant_businessName.slice(1)}\r\n                </Label>\r\n                <br />\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n\r\n          <CardTitle\r\n            className=\"border-bottom p-2 mb-0\"\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n          >\r\n            Offers\r\n          </CardTitle>\r\n\r\n          <Row>\r\n            {\" \"}\r\n            {data.offer\r\n              ? data.offer.map((item, index) => (\r\n                <>\r\n                  <Col sm={3} className=\"card p-2 mt-3 ml-3\">\r\n                    <p style={{ fontWeight: \"bold\", color: COLORS.primary }}>\r\n                      <span>{item.offer_title}</span>{\" \"}\r\n                    </p>\r\n                    <p>\r\n                      <span>{item.offer_description}</span>{\" \"}\r\n                    </p>\r\n                    <p>\r\n                      Price: <span>{item.offer_price}</span>{\" \"}\r\n                    </p>\r\n                    <p>\r\n                      Discount: <span>{item.offer_discount}</span>{\" \"}\r\n                    </p>\r\n                  </Col>\r\n                </>\r\n              ))\r\n              : \"Loading...\"}\r\n          </Row>\r\n        </Card>\r\n\r\n      </>\r\n    );\r\n  };\r\n\r\n\r\n  const renderCampaignList = () => {\r\n    return (\r\n      <>\r\n        <Card>\r\n          <div>\r\n\r\n          </div>\r\n\r\n          <CardTitle className=\"bg-light border-bottom p-3 mb-0\"\r\n            style={{ display: 'flex', }}\r\n          >\r\n            <i className=\"mdi mdi-border-none mr-2\"> </i>\r\n            <div style={{ width: '160px' }}>\r\n              Campaigns List\r\n            </div>\r\n\r\n\r\n            <FormGroup className=\"mb-3\"\r\n              style={{\r\n                width: \"40%\",\r\n                display: \"flex\",\r\n                justifyContent: 'space-between',\r\n                marginLeft: '420px'\r\n              }}>\r\n\r\n              <Input\r\n                type=\"text\"\r\n                id=\"search\"\r\n                placeholder=\"Search Merchants..\"\r\n                onChange={filterList}\r\n\r\n\r\n              />\r\n              <IoSearchSharp\r\n                style={{ position: \"absolute\", left: \"92%\", marginTop: \"6px\" }}\r\n                size={22}\r\n                color={COLORS.primary} />\r\n\r\n\r\n\r\n            </FormGroup>\r\n\r\n          </CardTitle>\r\n\r\n          <CardBody className=\"\" style={{ fontSize: 12 }}>\r\n            <Table\r\n              striped\r\n              hover\r\n              responsive\r\n              condensed\r\n              search={true}\r\n              deleteRow={true}\r\n              pagination\r\n              tableHeaderClass=\"mb-0\"\r\n            >\r\n\r\n\r\n\r\n              <thead>\r\n                <tr className={\"text-center\"}>\r\n                  <th>#</th>\r\n                  <th>Status</th>\r\n                  <th>Image</th>\r\n                  <th>Campaign Title</th>\r\n                  {/* <th>Description</th> */}\r\n                  <th>End Date</th>\r\n                  {/*<th>Category</th>*/}\r\n                  {/*<th>Sub Category</th>*/}\r\n                  <th colSpan={2}>Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"responsive\">\r\n                {console.log(\"currrr\", currentCampaigns)}\r\n                {\r\n                  !searchValue\r\n                    ?\r\n                    //  &&\r\n                    campaignsSelector &&\r\n                    currentCampaigns.map((item, index) => (\r\n                      <tr\r\n                        key={index}\r\n                        className={\"text-center\"}\r\n                        style={{ height: 60 }}\r\n                      >\r\n                        <th scope=\"row\">{index + 1}</th>\r\n                        <td>{item.campaignStatus}</td>\r\n                        <td>\r\n                          {/* {console.log(\"null\", imgURL + item.image[0])}\r\n                            {console.log(\"uri\", item.image[0])} */}\r\n                          <img\r\n                            src={item.image ? imgURL + item.image[0] : AvatarImage}\r\n\r\n                            style={{\r\n                              width: 40,\r\n                              height: 40,\r\n                              marginTop: -5,\r\n                              resize: \"contain\",\r\n                            }}\r\n                            alt={item.title}\r\n                          />\r\n                        </td>\r\n\r\n                        <td>{item.title.substring(0, 24).trimEnd() +\r\n                          \"...\"}</td>\r\n                        {/* <td>{item.description}</td> */}\r\n                        <td>{item.end_date}</td>\r\n                        {/*<td>{item.category}</td>*/}\r\n                        {/*<td>{item.subCategory}</td>*/}\r\n                        <td>\r\n                          <Button\r\n                            className=\"btn btn-info\"\r\n                            style={{\r\n                              fontSize: 12,\r\n                              backgroundColor:\r\n                                item.campaignStatus === \"active\"\r\n                                  ? COLORS.primary\r\n                                  : COLORS.black,\r\n                              borderColor:\r\n                                item.campaignStatus === \"active\"\r\n                                  ? COLORS.primary\r\n                                  : COLORS.black,\r\n                              width: \"80px\",\r\n                            }}\r\n                            onClick={() => updateStatus(item)}\r\n                          >\r\n                            {item.campaignStatus === \"active\"\r\n                              ? \"Disable\"\r\n                              : \"Active\"}\r\n                          </Button>\r\n                          <Button\r\n                            className=\"btn btn-primary ml-3\"\r\n                            onClick={() => setEditDetails(item)}\r\n                            style={{\r\n                              fontSize: 12,\r\n                              width: \"80px\",\r\n                            }}\r\n                          >\r\n                            Edit\r\n                          </Button>\r\n                          {/* <Button\r\n                              onClick={() => {\r\n                                setSelectedDetails(item);\r\n                                // console.log(\"new de11\", selectedDetails);\r\n                                \r\n                              }}\r\n                              style={{\r\n                                width: \"60px\",\r\n                                fontSize: 12,\r\n                                backgroundColor: COLORS.black06,\r\n                                borderColor: COLORS.black06,\r\n                              }}\r\n                              className=\"btn btn-info ml-3\"\r\n                            >\r\n                              View\r\n                            </Button> */}\r\n                          <Button\r\n                            style={{\r\n                              width: \"70px\",\r\n                              fontSize: 12,\r\n                              backgroundColor: COLORS.black06,\r\n                              borderColor: COLORS.black06,\r\n                            }}\r\n                            className=\"btn btn-info ml-3\"\r\n                            onClick={(e) => handleDelete(e, item._id)}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </td>\r\n                      </tr>\r\n                    ))\r\n                    :\r\n                    currentRecords.map((item, index) => (\r\n                      <tr\r\n                        key={index}\r\n                        className={\"text-center\"}\r\n                        style={{ height: 60 }}\r\n                      >\r\n                        <th scope=\"row\">{index + 1}</th>\r\n                        <td>{item.campaignStatus}</td>\r\n                        <td>\r\n                          {console.log(\"null\", imgURL + item.image[0])}\r\n                          {console.log(\"uri\", item.image[0])}\r\n                          <img\r\n                            // src={item.image ? { uri: item.image } : AvatarImage}\r\n                            src={\r\n                              item.image\r\n                                ? imgURL + item.image[0]\r\n                                : AvatarImage\r\n                            }\r\n                            style={{\r\n                              width: 40,\r\n                              height: 40,\r\n                              marginTop: -5,\r\n                              resize: \"contain\",\r\n                            }}\r\n                            alt={item.title}\r\n                          />\r\n                        </td>\r\n\r\n                        <td>{item.title}</td>\r\n                        {/* <td>{item.description}</td> */}\r\n                        <td>{item.end_date}</td>\r\n                        {/*<td>{item.category}</td>*/}\r\n                        {/*<td>{item.subCategory}</td>*/}\r\n                        <td>\r\n                          <Button\r\n                            className=\"btn btn-info\"\r\n                            style={{\r\n                              fontSize: 12,\r\n                              backgroundColor:\r\n                                item.campaignStatus === \"active\"\r\n                                  ? COLORS.primary\r\n                                  : COLORS.black,\r\n                              borderColor:\r\n                                item.campaignStatus === \"active\"\r\n                                  ? COLORS.primary\r\n                                  : COLORS.black,\r\n                              width: \"80px\",\r\n                            }}\r\n                            onClick={() => updateStatus(item)}\r\n                          >\r\n                            {item.campaignStatus === \"active\"\r\n                              ? \"Disable\"\r\n                              : \"Active\"}\r\n                          </Button>\r\n                          <Button\r\n                            className=\"btn btn-primary ml-3\"\r\n                            onClick={() => setEditDetails(item)}\r\n                            style={{\r\n                              fontSize: 12,\r\n                              width: \"80px\",\r\n                            }}\r\n                          >\r\n                            Edit\r\n                          </Button>\r\n                          {/* <Button\r\n                              onClick={() => {\r\n                                setSelectedDetails(item);\r\n                                console.log(\"new de11\", selectedDetails);\r\n                                // {selectedDetails && renderSelectedUser(selectedDetails)}\r\n                                // {detailScreen && <CampaignDetails selectedDetails={selectedDetails}/>}\r\n                              }}\r\n                              style={{\r\n                                width: \"60px\",\r\n                                fontSize: 12,\r\n                                backgroundColor: COLORS.black06,\r\n                                borderColor: COLORS.black06,\r\n                              }}\r\n                              className=\"btn btn-info ml-3\"\r\n                            >\r\n                              View\r\n                            </Button> */}\r\n                          <Button\r\n                            style={{\r\n                              width: \"70px\",\r\n                              fontSize: 12,\r\n                              backgroundColor: COLORS.black06,\r\n                              borderColor: COLORS.black06,\r\n                            }}\r\n                            className=\"btn btn-info ml-3\"\r\n                            onClick={(e) => handleDelete(e, item._id)}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </td>\r\n                      </tr>\r\n                    ))\r\n                  //  : \"Loading\"\r\n                }\r\n              </tbody>\r\n            </Table>\r\n          </CardBody>\r\n        </Card>\r\n\r\n\r\n\r\n\r\n\r\n        <Pagination\r\n          nPages={nPages}\r\n          currentPage={currentPage}\r\n          setCurrentPage={setCurrentPage}\r\n\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  \r\n  return selectedDetails ? (\r\n    renderSelectedUser()\r\n  ) : (\r\n    <>\r\n      <CampaignForm\r\n        editData={editDetails}\r\n        cancelEdit={() => setEditDetails(null)}\r\n      />\r\n      {/* {console.log(\"details\", selectedDetails)} */}\r\n      {renderCampaignList()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Campaigns;"],"names":["nPages","currentPage","setCurrentPage","pageNumbers","Array","keys","slice","className","onClick","href","map","pgNumber","props","initialState","city","title","description","category","subCategory","image","video","start_date","end_date","offer","merchant_businessName","merchantId","useState","formValue","setFormValue","errorObj","setErrorObj","newOffers","setNewOffers","modal","setModal","editModal","setEditModal","editIndex","setEditIndex","setEditOfferDetails","setPics","selectedDetails","setSelectedDetails","videoDuration","setVideoDuration","videoswitch","setVideoSwitch","dispatch","useDispatch","campaignsSelector","useSelector","state","allCampaigns","data","packageTypeListSelector","package","packageTypeList","packageListShow","packageList","useEffect","getPackageType","getPackage","getAllMerchantSelector","allMerchants","media","Audio","editData","imgURL","onloadedmetadata","console","log","Math","floor","duration","settings1","dots","autoplay","speed","slidesToShow","uploadMediaFile","file","formData","FormData","append","fileUrl","uploadMedia","url","calculate_cities","length","getAllCampaigns","getAllMerchants","onSelectMainCategory","selectedList","selectedItem","error","index","onSelectSubCategory","cities_name","v","push","location_city","cities_of_selected_merchant","set_cities_of_selected_merchant","businessName","location","get_city_names","e","names","handleRemoveOffer","item","temp","splice","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","cb","editToggle","Modal","isOpen","ModalHeader","ModalBody","FormGroup","Label","Input","required","type","onChange","offer_title","target","value","CKEditor","name","editor","ClassicEditor","offer_description","getData","min","oninput","offer_price","parseFloat","offer_discount","Button","color","toggle","onSubmit","event","preventDefault","handleSubmitEditOffer","for","id","defaultValue","defaultChecked","style","backgroundColor","COLORS","renderEditOffer","Row","Col","sm","Card","CardTitle","charAt","toUpperCase","CardBody","toast","updateCampaign","_id","createNewCampaign","submitForm","md","marginTop","marginLeft","marginBottom","infinite","muted","autoPlay","width","height","onPlay","onPause","src","i","alt","position","top","filterIndex","indexOf","filter","img","htmlFor","options","selectedValues","onSelect","onRemove","displayValue","multiple","accept","files","res","link","padding","toISOString","split","disabled","find","selected","m","profile","r","fontWeight","fontSize","parse","Swal","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","size","handleEditOffer","border","cancelEdit","setCampaignStatus","editDetails","setEditDetails","tableData","setTableData","searchValue","setSearchValue","recordsPerPage","filterList","filterResults","filtered","product","toLowerCase","includes","indexOfLastRecord","indexOfFirstRecord","currentRecords","ceil","currentCampaigns","handleDelete","window","confirm","thisClickedDelete","currentTarget","innerText","deleteCampaign","closest","remove","updateStatus","obj","campaignStatus","display","flexDirection","justifyContent","borderColor","borderRadius","alignItems","slidesToScroll","renderSelectedUser","placeholder","left","Table","striped","hover","responsive","condensed","search","deleteRow","pagination","tableHeaderClass","colSpan","scope","AvatarImage","resize","substring","trimEnd","Pagination"],"sourceRoot":""}