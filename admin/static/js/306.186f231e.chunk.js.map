{"version":3,"file":"static/js/306.186f231e.chunk.js","mappings":"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","sources":["screen/packageType/packageForm.js","../node_modules/reactstrap/es/Label.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    ListGroup, ListGroupItem,\r\n    CardTitle\r\n} from 'reactstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport Form from 'react-validation/build/form';\r\nimport { COLORS } from '../../colors';\r\nimport { useDispatch } from 'react-redux'\r\nimport { uploadMedia } from '../../redux/actions'\r\nimport { createPackageType, editPackageType, getPackage } from '../../redux/actions/package';\r\nimport { imgURL } from '../../redux/config';\r\nimport { useSelector } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst PackageForm = (props) => {\r\n\r\n    const packageListSelector = useSelector((state) => state.package.packageList);\r\n\r\n\r\n    const { register, handleSubmit, errors } = useForm(); // initialise the hook\r\n    let initialState = { name: \"\", image: \"\", categoryTypeId: \"\" }\r\n    const [Formvalue, setFormvalue] = useState(initialState);\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        set_preview_src(\"\")\r\n\r\n        dispatch(getPackage())\r\n\r\n        if (props.editData) {\r\n\r\n            setFormvalue(props.editData)\r\n        }\r\n\r\n    }, [props.editData])\r\n\r\n\r\n    const onSubmit = (data) => {\r\n\r\n\r\n\r\n        if (!props.editData) {\r\n\r\n            setFormvalue(data);\r\n            let formData = new FormData()\r\n            formData.append('file', data.image[0])\r\n            // console.log(\"sdadsadadads\", formData, data)\r\n            dispatch(uploadMedia(formData, (fileUrl) => {\r\n                let obj = {\r\n                    name: data.name,\r\n                    image: fileUrl,\r\n                    categoryTypeId: Formvalue.categoryTypeId\r\n                    // image: fileUrl,\r\n                    // startingPrice:data.startingPrice\r\n                }\r\n\r\n                dispatch(createPackageType(obj, (data) => { props.updateList(data); toast.success(\"Sub Category Created\") }))\r\n            }))\r\n        }\r\n\r\n        else {\r\n            if (Object.keys(data.image).length) {\r\n                let formData = new FormData()\r\n                formData.append('file', data.image[0])\r\n                dispatch(uploadMedia(formData, (fileUrl) => {\r\n                    let obj = {\r\n                        name: data.name,\r\n                        image: fileUrl,\r\n                        categoryTypeId: Formvalue.categoryTypeId\r\n\r\n                    }\r\n\r\n                    dispatch(editPackageType(props.editData._id, obj, (data) => { props.updateList(data); toast.success(\"Sub Category Updated\") }))\r\n                }))\r\n            } else {\r\n                let obj = {\r\n                    name: data.name,\r\n                    // startingPrice:data.startingPrice\r\n                    categoryTypeId: Formvalue.categoryTypeId\r\n\r\n                }\r\n                console.log(obj)\r\n                dispatch(editPackageType(props.editData._id, obj, (data) => { props.updateList(data); toast.success(\"Sub Category Updated\") }))\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    const [preview_src, set_preview_src] = useState(\"\")\r\n\r\n    const preview_image = (e) => {\r\n        // URL.revokeObjectURL(output.src)\r\n        const img_preview = URL.createObjectURL(e.target.files[0]);\r\n        set_preview_src(img_preview)\r\n\r\n        // URL.revokeObjectURL(preview_src)\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <Row>\r\n\r\n            <Col sm={\"12\"}>\r\n                <Card>\r\n                    <CardTitle className=\"p-3 border-bottom mb-0\">\r\n                        <i className=\"mdi mdi-alert-box mr-2\" />\r\n                        {props.editData ? props.editData.name + \" | Edit Sub Category\" : 'Create Sub Category'}\r\n                    </CardTitle>\r\n                    <CardBody>\r\n\r\n                        <Form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n\r\n                            <Row>\r\n\r\n                                <Col sm={Formvalue.image || preview_src != \"\" ? \"6\" : \"12\"}>\r\n\r\n                                    <FormGroup>\r\n                                        <label className=\"control-label\" htmlFor=\"firstname\">\r\n                                            Title *\r\n                                        </label>\r\n\r\n                                        <div className=\"mb-2\">\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"name\"\r\n                                                onChange={(e) => setFormvalue({ ...Formvalue, name: e.target.value })}\r\n                                                value={Formvalue.name}\r\n                                                ref={register({ required: true })}\r\n                                                className=\"form-control\"\r\n                                            />\r\n                                        </div>\r\n                                        <span className=\"text-danger\">{errors.name && 'Title is required.'}</span>\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup>\r\n\r\n                                        <Label for=\"packageType\">Main Category *</Label>\r\n                                        {props.editData ?\r\n\r\n                                            <select\r\n\r\n                                                onChange={(e) => setFormvalue({ ...Formvalue, categoryTypeId: e.target.value })}\r\n\r\n                                                className=\"form-control\"\r\n                                                ref={register({ required: true })}\r\n                                                type=\"select\">\r\n\r\n\r\n\r\n                                                <option value=\"\">Select</option>\r\n\r\n                                                {packageListSelector?.map((item, index) => (\r\n\r\n                                                    <option selected={item._id == props.editData?.categoryTypeId?._id} key={index} value={item._id}>{item.name}</option>\r\n                                                ))}\r\n                                            </select> :\r\n\r\n                                            // <input\r\n                                            //     value={props.editData?.packageTypeId?.title} \r\n                                            //     type=\"text\"\r\n                                            //     //    disabled={true}\r\n                                            //     name=\"packageTypeId\"\r\n                                            //     ref={register({ required: true })}\r\n                                            //     className=\"form-control\"\r\n                                            // />}\r\n\r\n                                            <select\r\n\r\n                                                className=\"form-control\" name=\"packageTypeId\"\r\n                                                onChange={(e) => setFormvalue({ ...Formvalue, categoryTypeId: e.target.value })}\r\n\r\n                                                ref={register({ required: true })}\r\n                                                type=\"select\">\r\n\r\n\r\n                                                <option value=\"\">Select</option>\r\n\r\n                                                {packageListSelector?.map((item, index) => (\r\n                                                    <option onClick={() => setFormvalue({ ...Formvalue, categoryTypeId: [...Formvalue.categoryTypeId, item._id] })} key={index} value={item._id}>{item.name}</option>\r\n                                                ))}\r\n                                            </select>\r\n                                        }\r\n\r\n\r\n                                        <span className=\"text-danger\">{errors.packageTypeId && 'Please select package type'}</span>\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup>\r\n                                        <label className=\"control-label\" htmlFor=\"image\">\r\n                                            Image Cover\r\n                                        </label>\r\n\r\n                                        <div className=\"mb-2\">\r\n                                            <input\r\n                                                onChange={(e) => preview_image(e)}\r\n                                                type=\"file\"\r\n                                                // value={}\r\n                                                name=\"image\"\r\n                                                ref={register({ required: props.editData ? false : true })}\r\n                                                className=\"form-control\"\r\n                                                accept=\"image/png, image/jpeg\"\r\n                                            />\r\n                                        </div>\r\n                                        <span className=\"text-danger\">{errors.image && 'Image cover is required.'}</span>\r\n\r\n\r\n                                    </FormGroup>\r\n\r\n\r\n                                    <FormGroup>\r\n                                        <Button className=\"button btn-info\" style={{ backgroundColor: COLORS.primary, width: 120, border: 0 }}\r\n                                            onClick={() => {\r\n                                                props.cancelEdit && props.cancelEdit()\r\n                                                setFormvalue(initialState)\r\n                                            }} type=\"reset\" >\r\n                                            Reset\r\n                                        </Button>\r\n                                        <Button className=\"button btn-info ml-4\" style={{ backgroundColor: COLORS.black, width: 120, border: 0 }} type=\"submit\">\r\n                                            Submit\r\n                                        </Button>\r\n                                    </FormGroup>\r\n\r\n\r\n\r\n                                </Col>\r\n\r\n\r\n                                {/* {!!Formvalue.image || preview_src != \"\" && */}\r\n\r\n                                {/* <Col sm=\"6\"> */}\r\n\r\n                                {/* <img src={preview_src != \"\" ? preview_src : imgURL + Formvalue.image} style={{ width: '100%', resizeMode: \"contain\", height: '100%' }} /> */}\r\n\r\n\r\n                                {(!!props.editData && !!props.editData?.image || (preview_src != \"\")) && <Col sm=\"6\" >\r\n                                    <img src={preview_src != \"\" ? preview_src : imgURL + props.editData.image} style={{ width: '80%', resizeMode: \"contain\", height: '60%' }} />\r\n                                </Col>}\r\n\r\n\r\n                                {/* </Col> */}\r\n\r\n                                {/* } */}\r\n                            </Row>\r\n                        </Form>\r\n\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default PackageForm;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"hidden\", \"widths\", \"tag\", \"check\", \"size\", \"for\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number, PropTypes.shape({\n  size: stringOrNumberProp,\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  children: PropTypes.node,\n  hidden: PropTypes.bool,\n  check: PropTypes.bool,\n  size: PropTypes.string,\n  for: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'label',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Label = function Label(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      hidden = props.hidden,\n      widths = props.widths,\n      Tag = props.tag,\n      check = props.check,\n      size = props.size,\n      htmlFor = props.for,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n    var colClass;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames))), cssModule);\n    } else {\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n      colClasses.push(colClass);\n    }\n  });\n  var classes = mapToCssModules(classNames(className, hidden ? 'sr-only' : false, check ? 'form-check-label' : false, size ? \"col-form-label-\" + size : false, colClasses, colClasses.length ? 'col-form-label' : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    htmlFor: htmlFor\n  }, attributes, {\n    className: classes\n  }));\n};\n\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\nexport default Label;"],"names":["props","packageListSelector","useSelector","state","package","packageList","useForm","register","handleSubmit","errors","initialState","name","image","categoryTypeId","useState","Formvalue","setFormvalue","dispatch","useDispatch","useEffect","set_preview_src","getPackage","editData","preview_src","sm","className","onSubmit","data","Object","keys","length","formData","FormData","append","uploadMedia","fileUrl","obj","editPackageType","_id","updateList","toast","console","log","createPackageType","htmlFor","type","onChange","e","target","value","ref","required","for","map","item","index","selected","onClick","packageTypeId","img_preview","URL","createObjectURL","files","preview_image","accept","style","backgroundColor","COLORS","width","border","cancelEdit","src","imgURL","resizeMode","height","_excluded","stringOrNumberProp","PropTypes","columnProps","size","order","offset","propTypes","children","hidden","check","tag","tagPropType","cssModule","xs","md","lg","xl","widths","defaultProps","getColumnSizeClass","isXs","colWidth","colSize","Label","Tag","attributes","_objectWithoutPropertiesLoose","colClasses","forEach","i","columnProp","colClass","isObject","_classNames","colSizeInterfix","push","mapToCssModules","classNames","classes","React","_extends"],"sourceRoot":""}